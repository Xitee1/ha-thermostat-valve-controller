{
    "config": {
        "step": {
            "user": {
                "data": {
                    "name": "Thermostat Name",
                    "temperature_sensor_entity_id": "Temperature sensor entity",
                    "precision": "Temperature sensor precision",
                    "valve_entity_id": "Thermostat valve entity",
                    "valve_emergency_position": "Emergency valve position",
                    "min_cycle_duration": "Minimum cycle duration"
                },
                "data_description": {
                    "temperature_sensor_entity_id": "Entity ID of the temperature sensor",
                    "precision": "Precision of the temperature sensor. Usually this is 0.1 or 1. Some sensors might have a higher accuracity and use 0.01",
                    "valve_entity_id": "Entity ID of the valve position input",
                    "valve_emergency_position": "The emergency valve position is used when the temperature sensor is not available. Set this to a value that does not make the arctis or a sauna club out of your room. Leave empty to stop controlling the valve altogether if the temperature sensor unavailable (NOT RECOMMENDED if you don't externally handle this problem because of said reasons).",
                    "min_cycle_duration": "Minimum cycle duration in seconds. Useful to prevent the valve from moving too often, reducing battery life."
                }
            },
            "valve_position": {
                "title": "Valve Position Mapping",
                "description": "Define custom position mappings for the valve. Enter as JSON key-value pairs where keys are temperatures and values are valve positions.",
                "data": {
                    "position_mapping": "Position Mapping"
                },
                "data_description": {
                    "position_mapping": "It's recommended to leave this as default for now. You can fine tune it later on."
                }
            },
            "presets": {
                "title": "Temperature presets",
                "data": {
                  "home_temp": "[%key:common::state::home%]",
                  "away_temp": "[%key:common::state::not_home%]",
                  "comfort_temp": "[%key:component::climate::entity_component::_::state_attributes::preset_mode::state::comfort%]",
                  "eco_temp": "[%key:component::climate::entity_component::_::state_attributes::preset_mode::state::eco%]",
                  "sleep_temp": "[%key:component::climate::entity_component::_::state_attributes::preset_mode::state::sleep%]",
                  "activity_temp": "[%key:component::climate::entity_component::_::state_attributes::preset_mode::state::activity%]"
                }
            },
            "thermostat": {
                "data": {
                    "min_temp": "Minimum temperature",
                    "max_temp": "Maximum temperature",
                    "target_temp_step": "Target temperature step"
                },
                "data_description": {
                    "min_temp": "Minimum temperature that can be set",
                    "max_temp": "Maximum temperature that can be set",
                    "target_temp_step": "Increment by which the temperature can be adjusted"
                }
            }
        }
    },
    "options": {
        "step": {
            "init": {
                "menu_options": {
                    "valve": "Valve Configuration",
                    "valve_position": "Valve Position Mapping",
                    "thermostat": "Temperature Settings",
                    "presets": "Preset Temperatures"
                }
            },
            "valve": {
                "data": {
                    "temperature_sensor_entity_id": "Temperature sensor entity",
                    "precision": "Precision of the temperature sensor",
                    "valve_entity_id": "Thermostat valve entity",
                    "valve_emergency_position": "Emergency valve position",
                    "min_cycle_duration": "Minimum cycle duration"
                },
                "data_description": {
                    "temperature_sensor_entity_id": "Entity ID of the temperature sensor",
                    "precision": "Precision of the temperature sensor. Do not use any other numbers than 0 and 1 (e.g. 0.5 would be wrong). This is used for displaying the current temperature on the thermostat entity and hte graphs. Without this settings these numbers would get rounded (to the next integer by HA defaults). Usually this is 0.1 for most temperature sensors. Some sensors might have a higher accuracity and use 0.01. If it only reads full degrees, set it to 1.",
                    "valve_entity_id": "Entity ID of the valve position input",
                    "valve_emergency_position": "The emergency valve position is used when the temperature sensor is not available. Set this to a value that does not make the arctis or a sauna club out of your room. Leave empty to stop controlling the valve altogether if the temperature sensor unavailable (NOT RECOMMENDED if you don't externally handle this problem because of said reasons).",
                    "min_cycle_duration": "Minimum cycle duration in seconds. Useful to prevent the valve from moving too often, reducing battery life."
                }
            },
            "valve_position": {
                "title": "Valve Position Mapping",
                "description": "Define custom position mappings for the valve. Enter as JSON key-value pairs where keys are temperatures and values are valve positions.",
                "data": {
                    "position_mapping": "Position Mapping"
                }
            },
            "presets": {
                "title": "Temperature presets",
                "data": {
                  "home_temp": "[%key:common::state::home%]",
                  "away_temp": "[%key:common::state::not_home%]",
                  "comfort_temp": "[%key:component::climate::entity_component::_::state_attributes::preset_mode::state::comfort%]",
                  "eco_temp": "[%key:component::climate::entity_component::_::state_attributes::preset_mode::state::eco%]",
                  "sleep_temp": "[%key:component::climate::entity_component::_::state_attributes::preset_mode::state::sleep%]",
                  "activity_temp": "[%key:component::climate::entity_component::_::state_attributes::preset_mode::state::activity%]"
                }
            },
            "thermostat": {
                "data": {
                    "min_temp": "Minimum temperature",
                    "max_temp": "Maximum temperature",
                    "target_temp_step": "Target temperature step"
                },
                "data_description": {
                    "min_temp": "Minimum temperature that can be set",
                    "max_temp": "Maximum temperature that can be set",
                    "target_temp_step": "Increment by which the temperature can be adjusted"
                }
            }
        }
    }
}